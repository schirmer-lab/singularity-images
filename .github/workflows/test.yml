name: singularity-deploy-test

# run on pull requests
on:
  pull_request: []

jobs:
  setup:
    name: Prepare NFS & Wait for Lock
    runs-on: self-hosted
    steps:
      - name: Wait for other release job to finish
        run: |
          while [ -e "/nfs/data/release.job.lock" ]; do
            echo "A Release Job is running, waiting for 30 seconds..."
            sleep 30
          done
      - name: Clean and recreate target directories
        run: |
          rm -rf /nfs/data/large_images/*.* \
                 /nfs/data/medium_images/*.* \
                 /nfs/data/release/*.*
          mkdir -p /nfs/data/large_images \
                   /nfs/data/medium_images \
                   /nfs/data/release

  find-recipes:
    name: Discover Singularity recipes
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - name: Generate build matrix
        id: set-matrix
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const recipes = fs
              .readdirSync('.')
              .filter(f => f.startsWith('Singularity'));
            const matrix = {
              include: recipes.map(r => ({ recipe: r }))
            };
            core.setOutput('matrix', JSON.stringify(matrix));

  build:
    name: Build ${{ matrix.recipe }}
    needs: [setup, find-recipes]
    runs-on: self-hosted
    strategy:
      matrix: ${{ fromJson(needs.find-recipes.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Singularity
        uses: eWaterCycle/setup-singularity@v7
        with:
          singularity-version: 3.7.1

      - name: Build container for ${{ matrix.recipe }}
        env:
          SINGULARITY_NO_CACHE: 1
          SINGULARITY_CACHEDIR: $RUNNER_TEMP/singularity-cache
        run: |
          recipe=${{ matrix.recipe }}
          echo "Building $recipe"

          tag=$(echo "${recipe/Singularity\./}")

          if [ "$tag" == "Singularity" ]; then
            tag=latest
          fi

          echo "Tag is $tag."
          container="${tag:12}.sif"

          mkdir -p "$SINGULARITY_CACHEDIR"
          singularity build --fakeroot "$container" "$recipe"
          if [[ $? -ne 0 ]]; then
            echo "Error building $container"
            exit 1
          fi

          echo "Successfully built $container."
          size=$(stat -c%s "$container")
          two_gb=$((2*1024*1024*1024))
          four_gb=$((4*1024*1024*1024))

          if (( size > four_gb )); then
            echo "Container >4 GB; skipping publish"
            mv "$container" "/nfs/data/large_images/$container"
          elif (( size > two_gb )); then
            echo "Container >2 GB; uploading to medium_images"
            mv "$container" "/nfs/data/medium_images/$container"
          else
            echo "Container â‰¤2 GB; uploading to release"
            mv "$container" "/nfs/data/release/$container"
          fi

      - name: Clean runner temp
        if: always()
        run: |
          echo "Removing all files from $RUNNER_TEMP"
          rm -rf "$RUNNER_TEMP"/*

